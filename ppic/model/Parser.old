package ppic.model;

import java.util.ArrayList;
import java.util.Scanner;
import ppic.util.Reflection;


public class CopyOfParser
{
    public static final String PACKAGE = "ppic.model.operators.";

    public static final CopyOfParser singleton = new CopyOfParser();

    public String[] functions = {
            ppic.model.operators.PPConstant.NAME,
            ppic.model.operators.PPX.NAME,
            ppic.model.operators.PPY.NAME,
            ppic.model.operators.PPAbs.NAME,
            ppic.model.operators.PPAtan.NAME,
            ppic.model.operators.PPCeil.NAME,
            ppic.model.operators.PPClip.NAME,
            ppic.model.operators.PPCos.NAME,
            ppic.model.operators.PPExp.NAME,
            ppic.model.operators.PPFloor.NAME,
            ppic.model.operators.PPLog.NAME,
            ppic.model.operators.PPNegate.NAME,
            ppic.model.operators.PPRGBYCrCb.NAME,
            ppic.model.operators.PPSin.NAME,
            ppic.model.operators.PPWrap.NAME,
            ppic.model.operators.PPYCrCbRGB.NAME,
            ppic.model.operators.PPAdd.NAME,
            ppic.model.operators.PPBWPerlin.NAME,
            ppic.model.operators.PPColorPerlin.NAME,
            ppic.model.operators.PPDiv.NAME,
            ppic.model.operators.PPMul.NAME,
            ppic.model.operators.PPSub.NAME,
            ppic.model.operators.PPExtImageClip.NAME,
            ppic.model.operators.PPExtImageWrap.NAME
        };
    

    private ArrayList<String> _availableImages;


    private CopyOfParser ()
    {
        _availableImages = new ArrayList<String>();
    }


    public void addFile (String s)
    {
        if (! _availableImages.contains(s))
        {
            _availableImages.add(s);
        }
    }


    public void removeFile (String s)
    {
        if (! _availableImages.contains(s))
        {
            _availableImages.remove(s);
        }
    }


    public ArrayList<String> getImageList ()
    {
        return _availableImages;
    }



    public Expression parse (String expr)
        throws Exception
    {
        if (! expr.matches("(.*?)"))
            throw new Exception("Function parsing error, expected (, found " + expr.substring(0, 1));

//System.out.println("*" + expr.trim() + "*");
        expr = expr.trim();
        Scanner tokenizer = new Scanner(expr.substring(1, expr.length() - 1));
        String name = tokenizer.next();
        //int numArgs = tokenizer.nextInt();
        String args = tokenizer.hasNext() ? tokenizer.nextLine().trim() : "";

//System.out.println(name + "\n" + numArgs + "\n" + args);
        return (Expression)Reflection.createInstance(PACKAGE + name, args);
    }


    public Expression parseRecurse (String expr)
        throws Exception
    {
        if (! expr.matches("(.*?)"))
            throw new Exception("Function parsing error, expected (, found " + expr.substring(0, 1));

        System.out.println("*" + expr.trim() + "*");
        expr = expr.trim();
        int idx = expr.indexOf(' ');
        String type = (idx >= 0) ? expr.substring(1, idx) : expr.substring(1, expr.length() - 1);
        String filename = null;

        expr = expr.substring(idx + 1).trim();
        // special cases :(
        if (type.equals(ppic.model.operators.PPConstant.NAME))
        {
            return new ppic.model.operators.PPConstant(expr.substring(0, expr.length() - 1));
        }
        else if (type.equals(ppic.model.operators.PPExtImageClip.NAME) ||
                 type.equals(ppic.model.operators.PPExtImageWrap.NAME))
        {
            idx = expr.indexOf(' ');
            filename = expr.substring(1, idx - 1);
            expr = expr.substring(idx + 1);
        }

        String[] subExprs = splitSubExpressions(expr.substring(0, expr.length() - 1));
        Expression[] children = new Expression[subExprs.length];
        for (int k = 0; k < subExprs.length; k++)
        {
            children[k] = parseRecurse(subExprs[k]);
        }

        int numArgs = children.length;
        if (numArgs == 0)
        {
            return (Expression)Reflection.createInstance(PACKAGE + type);
        }
        else if (numArgs == 1)
        {
            return (Expression)Reflection.createInstance(PACKAGE + type, children[0]);
        }
        else
        {
            if (filename != null)
            {
                return (Expression)Reflection.createInstance(PACKAGE + type, filename, children[0], children[1]);
            }
            else
            {
                return (Expression)Reflection.createInstance(PACKAGE + type, children[0], children[1]);
            }
        }
    }


    private static String[] splitSubExpressions (String s)
    {
        java.util.ArrayList<String> results = new java.util.ArrayList<String>();
        while (s.length() > 0)
        {
            int k = markSubExpression(s);
            results.add(s.substring(0, k));
            s = s.substring(k).trim();
        }
        return results.toArray(new String[0]);
    }


    private static int markSubExpression (String expr)
    {
        int depth = 0;
        for (int k = 0; k < expr.length(); k++)
        {
            char c = expr.charAt(k);
            if (c == '(')
            {
                depth++;
            }
            else if (c == ')')
            {
                depth--;
                if (depth == 0)
                {
                    return k + 1;
                }
            }
        }
        return expr.length();
    }
}
